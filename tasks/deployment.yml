---

- name: clear and warmup cache
  shell: bin/console cache:clear && bin/console cache:warmup
  args:
    chdir: "{{ userli_symfony_path }}"
  environment:
    APP_ENV: "prod"
  become_user: "{{ userli_user }}"
  ignore_errors: true
  register: cache

- name: handle cache:clear errors
  shell: rm -rf var/cache/prod && bin/console cache:warmup
  args:
    chdir: "{{ userli_symfony_path }}"
  environment:
    APP_ENV: "prod"
  become_user: "{{ userli_user }}"
  when:
    - not ansible_check_mode
    - cache.rc != 0

- name: adjust permissions for cache directory
  file:
    path: "{{ userli_symfony_path }}/var/cache/prod"
    state: directory
    owner: "{{ userli_user }}"
    group: "{{ userli_group }}"
    mode: u+rw,g+r
    recurse: True

- name: adjust permissions for log directory
  file:
    path: "{{ userli_symfony_path }}/var/log"
    state: directory
    owner: "{{ userli_user }}"
    group: "{{ userli_group }}"
    mode: 2775

- name: detect if prod.log exists
  stat:
    path: "{{ userli_symfony_path }}/var/log/prod.log"
  register: __userli_prod_log

- name: create or adjust permissions for prod.log
  file:
    path: "{{ userli_symfony_path }}/var/log/prod.log"
    owner: "{{ userli_user }}"
    group: "{{ userli_group }}"
    mode: 0664
    state: "{{ 'file' if __userli_prod_log.stat.exists else 'touch' }}"

- name: load default reservedNames into database
  shell: bin/console app:reservednames:import
  args:
    chdir: "{{ userli_symfony_path }}"
  environment:
    APP_ENV: "prod"
  become_user: "{{ userli_user }}"

- name: load custom reservedNames into database
  shell: 'echo "{{ userli_extra_reserved_names|join("\n") }}"
    | bin/console app:reservednames:import --file=-'
  args:
    chdir: "{{ userli_symfony_path }}"
  environment:
    APP_ENV: "prod"
  become_user: "{{ userli_user }}"
